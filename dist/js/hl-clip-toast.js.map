{"version":3,"file":"hl-clip-toast.js","sources":["../../build/js/Core.js","../../build/js/hl-clip-toast.js"],"sourcesContent":["class Core {\r\n    // Default class strings\r\n    static DEFAULT_BUTTON_CLASS = 'btn btn-sm btn-primary position-absolute top-0 end-0 m-2 clipboard-btn';\r\n    static DEFAULT_WRAPPER_CLASS = 'position-relative';\r\n\r\n    // Default valid class lists (used if validation is enabled)\r\n    static defaultValidButtonClasses = [\r\n        'btn', 'btn-sm', 'btn-primary', 'btn-success', 'btn-danger', 'btn-warning',\r\n        'position-absolute', 'top-0', 'end-0', 'm-2', 'clipboard-btn'\r\n    ];\r\n\r\n    static defaultValidWrapperClasses = [\r\n        'position-relative', 'custom-wrapper-class'\r\n    ];\r\n\r\n    constructor(config = {}) {\r\n        this.config = {\r\n            iconDefault: 'bi bi-clipboard',\r\n            iconSuccess: 'bi bi-check-lg',\r\n            iconResetDelay: 2000,\r\n            messageSuccess: 'Code copied to clipboard',\r\n            messageError: 'Error copying the code',\r\n            messageClipboardUnsupported: 'Clipboard API is not available.',\r\n            buttonClass: Core.DEFAULT_BUTTON_CLASS,\r\n            wrapperClass: Core.DEFAULT_WRAPPER_CLASS,\r\n            closeButton: true,\r\n            progressBar: true,\r\n            timeOut: 3000,\r\n            validateClasses: true,\r\n            validButtonClasses: Core.defaultValidButtonClasses,\r\n            validWrapperClasses: Core.defaultValidWrapperClasses,\r\n            ...config\r\n        };\r\n    }\r\n\r\n    // Utility: Validate a string of classes against a whitelist\r\n    validateClassList(classString, validClasses) {\r\n        const classList = classString.trim().split(/\\s+/);\r\n        const invalid = classList.filter(cls => !validClasses.includes(cls));\r\n        return {\r\n            isValid: invalid.length === 0,\r\n            invalidClasses: invalid\r\n        };\r\n    }\r\n\r\n    // Apply validation if enabled; fallback to default class if invalid\r\n    getValidatedClass(inputClass, fallbackClass, validList, shouldValidate, label) {\r\n        if (!shouldValidate) return inputClass;\r\n\r\n        const { isValid, invalidClasses } = this.validateClassList(inputClass, validList);\r\n        if (!isValid) {\r\n            console.warn(`Invalid ${label} classes provided: ${invalidClasses.join(', ')}. Default class has been assigned.`);\r\n            return fallbackClass;\r\n        }\r\n        return inputClass;\r\n    }\r\n\r\n    // Create the clipboard button element\r\n    createClipboardButton(codeElement) {\r\n        const shouldValidate = this.config.validateClasses !== false;\r\n        const buttonClass = this.config.buttonClass || Core.DEFAULT_BUTTON_CLASS;\r\n\r\n        const finalButtonClass = this.getValidatedClass(\r\n            buttonClass,\r\n            Core.DEFAULT_BUTTON_CLASS,\r\n            this.config.validButtonClasses,\r\n            shouldValidate,\r\n            'button'\r\n        );\r\n\r\n        const button = document.createElement('button');\r\n        button.className = finalButtonClass;\r\n\r\n        const icon = document.createElement('i');\r\n        icon.className = this.config.iconDefault || 'bi bi-clipboard';\r\n        button.appendChild(icon);\r\n\r\n        button.addEventListener('click', () => {\r\n            if (!navigator.clipboard) {\r\n                toastr.warning(this.config.messageClipboardUnsupported || 'Clipboard API is not available.');\r\n                return;\r\n            }\r\n\r\n            const code = codeElement.textContent;\r\n\r\n            navigator.clipboard.writeText(code).then(() => {\r\n                icon.className = this.config.iconSuccess || 'bi bi-check-lg';\r\n\r\n                setTimeout(() => {\r\n                    icon.className = this.config.iconDefault || 'bi bi-clipboard';\r\n                }, this.config.iconResetDelay || 1500);\r\n\r\n                toastr.success(this.config.messageSuccess || 'Code copied to clipboard');\r\n            }).catch(() => {\r\n                toastr.error(this.config.messageError || 'Error copying the code');\r\n            });\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    // Enhance all <pre><code> blocks on the page\r\n    enhanceCodeBlocks() {\r\n        hljs.highlightAll();\r\n\r\n        const shouldValidate = this.config.validateClasses !== false;\r\n        const wrapperClass = this.config.wrapperClass || Core.DEFAULT_WRAPPER_CLASS;\r\n\r\n        const finalWrapperClass = this.getValidatedClass(\r\n            wrapperClass,\r\n            Core.DEFAULT_WRAPPER_CLASS,\r\n            this.config.validWrapperClasses,\r\n            shouldValidate,\r\n            'wrapper'\r\n        );\r\n\r\n        document.querySelectorAll('pre > code').forEach(code => {\r\n            const pre = code.parentElement;\r\n\r\n            const wrapper = document.createElement('div');\r\n            wrapper.className = finalWrapperClass;\r\n\r\n            pre.parentNode.insertBefore(wrapper, pre);\r\n            wrapper.appendChild(pre);\r\n\r\n            const button = this.createClipboardButton(code);\r\n            wrapper.appendChild(button);\r\n        });\r\n    }\r\n\r\n    // Public method to fire the enhancement\r\n    fire() {\r\n        toastr.options = {\r\n            closeButton: this.config.closeButton ?? false,\r\n            progressBar: this.config.progressBar ?? false,\r\n            timeOut: this.config.timeOut ?? 1500,\r\n            escapeHtml: true,\r\n        };\r\n\r\n        document.addEventListener('DOMContentLoaded', () => {\r\n            this.enhanceCodeBlocks();\r\n        });\r\n    }\r\n\r\n    greet() {\r\n        console.log(`Hello from Core! Config:`, this.config);\r\n    }\r\n}\r\n\r\n// Exporta la clase Core como HCT\r\nexport default Core;\r\n","import Core from './Core';\r\n\r\n// Exponer Core en el objeto global `window` como `HCT`\r\nwindow.HCT = Core;"],"names":["Core","config","arguments","length","undefined","_classCallCheck","this","_objectSpread","iconDefault","iconSuccess","iconResetDelay","messageSuccess","messageError","messageClipboardUnsupported","buttonClass","DEFAULT_BUTTON_CLASS","wrapperClass","DEFAULT_WRAPPER_CLASS","closeButton","progressBar","timeOut","validateClasses","validButtonClasses","defaultValidButtonClasses","validWrapperClasses","defaultValidWrapperClasses","key","value","classString","validClasses","invalid","trim","split","filter","cls","includes","isValid","invalidClasses","inputClass","fallbackClass","validList","shouldValidate","label","_this$validateClassLi","validateClassList","console","warn","concat","join","codeElement","_this","finalButtonClass","getValidatedClass","button","document","createElement","className","icon","appendChild","addEventListener","navigator","clipboard","code","textContent","writeText","then","setTimeout","toastr","success","error","warning","_this2","hljs","highlightAll","finalWrapperClass","querySelectorAll","forEach","pre","parentElement","wrapper","parentNode","insertBefore","createClipboardButton","_this$config$closeBut","_this$config$progress","_this$config$timeOut","_this3","options","escapeHtml","enhanceCodeBlocks","log","_defineProperty","window","HCT"],"mappings":"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"}